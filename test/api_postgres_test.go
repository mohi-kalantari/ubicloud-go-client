/*
Clover API

Testing PostgresApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/mohi-kalantari/ubicloud-go-client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_PostgresApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PostgresApiService CreatePostgresDatabase", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var location string
		var postgresDatabaseName string

		resp, httpRes, err := apiClient.PostgresApi.CreatePostgresDatabase(context.Background(), projectId, location, postgresDatabaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostgresApiService DeletePostgresDatabase", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var location string
		var postgresDatabaseName string

		httpRes, err := apiClient.PostgresApi.DeletePostgresDatabase(context.Background(), projectId, location, postgresDatabaseName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostgresApiService DeletePostgresDatabaseWithID", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var location string
		var postgresDatabaseId string

		httpRes, err := apiClient.PostgresApi.DeletePostgresDatabaseWithID(context.Background(), projectId, location, postgresDatabaseId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostgresApiService FailoverPostgresDatabaseWithID", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var location string
		var postgresDatabaseId string

		resp, httpRes, err := apiClient.PostgresApi.FailoverPostgresDatabaseWithID(context.Background(), projectId, location, postgresDatabaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostgresApiService GetPostgresDatabaseDetails", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var location string
		var postgresDatabaseName string

		resp, httpRes, err := apiClient.PostgresApi.GetPostgresDatabaseDetails(context.Background(), projectId, location, postgresDatabaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostgresApiService GetPostgresDetailsWithId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var location string
		var postgresDatabaseId string

		resp, httpRes, err := apiClient.PostgresApi.GetPostgresDetailsWithId(context.Background(), projectId, location, postgresDatabaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostgresApiService ListLocationPostgresDatabases", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var location string

		resp, httpRes, err := apiClient.PostgresApi.ListLocationPostgresDatabases(context.Background(), projectId, location).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostgresApiService ListPostgresDatabases", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.PostgresApi.ListPostgresDatabases(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostgresApiService ResetSuperuserPassword", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var location string
		var postgresDatabaseName string

		resp, httpRes, err := apiClient.PostgresApi.ResetSuperuserPassword(context.Background(), projectId, location, postgresDatabaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostgresApiService ResetSuperuserPasswordWithID", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var location string
		var postgresDatabaseId string

		resp, httpRes, err := apiClient.PostgresApi.ResetSuperuserPasswordWithID(context.Background(), projectId, location, postgresDatabaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostgresApiService RestorePostgresDatabase", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var location string
		var postgresDatabaseName string

		resp, httpRes, err := apiClient.PostgresApi.RestorePostgresDatabase(context.Background(), projectId, location, postgresDatabaseName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostgresApiService RestorePostgresDatabaseWithID", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string
		var location string
		var postgresDatabaseId string

		resp, httpRes, err := apiClient.PostgresApi.RestorePostgresDatabaseWithID(context.Background(), projectId, location, postgresDatabaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
