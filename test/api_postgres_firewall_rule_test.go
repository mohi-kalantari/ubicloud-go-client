/*
Clover API

Testing PostgresFirewallRuleApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/mohi-kalantari/ubicloud-go-client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_PostgresFirewallRuleApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PostgresFirewallRuleApiService CreateLocationPostgresFirewallRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var location string
		var postgresDatabaseName string
		var projectId string

		resp, httpRes, err := apiClient.PostgresFirewallRuleApi.CreateLocationPostgresFirewallRule(context.Background(), location, postgresDatabaseName, projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostgresFirewallRuleApiService CreateLocationPostgresFirewallRuleWithId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var location string
		var postgresDatabaseId string
		var projectId string

		resp, httpRes, err := apiClient.PostgresFirewallRuleApi.CreateLocationPostgresFirewallRuleWithId(context.Background(), location, postgresDatabaseId, projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostgresFirewallRuleApiService CreateLocationPostgresFirewallRuleWithIdWithId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var location string
		var postgresDatabaseId string
		var projectId string
		var firewallRuleId string

		resp, httpRes, err := apiClient.PostgresFirewallRuleApi.CreateLocationPostgresFirewallRuleWithIdWithId(context.Background(), location, postgresDatabaseId, projectId, firewallRuleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostgresFirewallRuleApiService GetLocationPostgresFirewallRuleDetailsWithId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var location string
		var postgresDatabaseId string
		var projectId string
		var firewallRuleId string

		resp, httpRes, err := apiClient.PostgresFirewallRuleApi.GetLocationPostgresFirewallRuleDetailsWithId(context.Background(), location, postgresDatabaseId, projectId, firewallRuleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostgresFirewallRuleApiService ListLocationPostgresFirewallRules", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var location string
		var postgresDatabaseId string
		var projectId string

		resp, httpRes, err := apiClient.PostgresFirewallRuleApi.ListLocationPostgresFirewallRules(context.Background(), location, postgresDatabaseId, projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
