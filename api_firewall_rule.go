/*
Clover API

API for managing resources on Ubicloud

API version: 0.1.0
Contact: support@ubicloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// FirewallRuleApiService FirewallRuleApi service
type FirewallRuleApiService service

type ApiCreateFirewallRuleRequest struct {
	ctx context.Context
	ApiService *FirewallRuleApiService
	projectId string
	firewallName string
	createFirewallRuleRequest *CreateFirewallRuleRequest
}

func (r ApiCreateFirewallRuleRequest) CreateFirewallRuleRequest(createFirewallRuleRequest CreateFirewallRuleRequest) ApiCreateFirewallRuleRequest {
	r.createFirewallRuleRequest = &createFirewallRuleRequest
	return r
}

func (r ApiCreateFirewallRuleRequest) Execute() (*FirewallRule, *http.Response, error) {
	return r.ApiService.CreateFirewallRuleExecute(r)
}

/*
CreateFirewallRule Create a new firewall rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param firewallName Name of the firewall
 @return ApiCreateFirewallRuleRequest
*/
func (a *FirewallRuleApiService) CreateFirewallRule(ctx context.Context, projectId string, firewallName string) ApiCreateFirewallRuleRequest {
	return ApiCreateFirewallRuleRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		firewallName: firewallName,
	}
}

// Execute executes the request
//  @return FirewallRule
func (a *FirewallRuleApiService) CreateFirewallRuleExecute(r ApiCreateFirewallRuleRequest) (*FirewallRule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FirewallRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirewallRuleApiService.CreateFirewallRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/firewall/{firewall_name}/firewall-rule"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firewall_name"+"}", url.PathEscape(parameterValueToString(r.firewallName, "firewallName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createFirewallRuleRequest == nil {
		return localVarReturnValue, nil, reportError("createFirewallRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createFirewallRuleRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateLocationFirewallFirewallRuleRequest struct {
	ctx context.Context
	ApiService *FirewallRuleApiService
	location string
	projectId string
	firewallName string
	firewallRuleId string
	createFirewallRuleRequest *CreateFirewallRuleRequest
}

func (r ApiCreateLocationFirewallFirewallRuleRequest) CreateFirewallRuleRequest(createFirewallRuleRequest CreateFirewallRuleRequest) ApiCreateLocationFirewallFirewallRuleRequest {
	r.createFirewallRuleRequest = &createFirewallRuleRequest
	return r
}

func (r ApiCreateLocationFirewallFirewallRuleRequest) Execute() (*FirewallRule, *http.Response, error) {
	return r.ApiService.CreateLocationFirewallFirewallRuleExecute(r)
}

/*
CreateLocationFirewallFirewallRule Create a new firewall rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param location The Ubicloud location/region
 @param projectId ID of the project
 @param firewallName Name of the firewall
 @param firewallRuleId ID of the firewall rule
 @return ApiCreateLocationFirewallFirewallRuleRequest
*/
func (a *FirewallRuleApiService) CreateLocationFirewallFirewallRule(ctx context.Context, location string, projectId string, firewallName string, firewallRuleId string) ApiCreateLocationFirewallFirewallRuleRequest {
	return ApiCreateLocationFirewallFirewallRuleRequest{
		ApiService: a,
		ctx: ctx,
		location: location,
		projectId: projectId,
		firewallName: firewallName,
		firewallRuleId: firewallRuleId,
	}
}

// Execute executes the request
//  @return FirewallRule
func (a *FirewallRuleApiService) CreateLocationFirewallFirewallRuleExecute(r ApiCreateLocationFirewallFirewallRuleRequest) (*FirewallRule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FirewallRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirewallRuleApiService.CreateLocationFirewallFirewallRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/firewall/{firewall_name}/firewall-rule/{firewall_rule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firewall_name"+"}", url.PathEscape(parameterValueToString(r.firewallName, "firewallName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firewall_rule_id"+"}", url.PathEscape(parameterValueToString(r.firewallRuleId, "firewallRuleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createFirewallRuleRequest == nil {
		return localVarReturnValue, nil, reportError("createFirewallRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createFirewallRuleRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateLocationFirewallFirewallRuleWithIdRequest struct {
	ctx context.Context
	ApiService *FirewallRuleApiService
	location string
	projectId string
	firewallName string
	firewallRuleId string
	createFirewallRuleRequest *CreateFirewallRuleRequest
}

func (r ApiCreateLocationFirewallFirewallRuleWithIdRequest) CreateFirewallRuleRequest(createFirewallRuleRequest CreateFirewallRuleRequest) ApiCreateLocationFirewallFirewallRuleWithIdRequest {
	r.createFirewallRuleRequest = &createFirewallRuleRequest
	return r
}

func (r ApiCreateLocationFirewallFirewallRuleWithIdRequest) Execute() (*FirewallRule, *http.Response, error) {
	return r.ApiService.CreateLocationFirewallFirewallRuleWithIdExecute(r)
}

/*
CreateLocationFirewallFirewallRuleWithId Create a new firewall rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param location The Ubicloud location/region
 @param projectId ID of the project
 @param firewallName Name of the firewall
 @param firewallRuleId ID of the firewall rule
 @return ApiCreateLocationFirewallFirewallRuleWithIdRequest
*/
func (a *FirewallRuleApiService) CreateLocationFirewallFirewallRuleWithId(ctx context.Context, location string, projectId string, firewallName string, firewallRuleId string) ApiCreateLocationFirewallFirewallRuleWithIdRequest {
	return ApiCreateLocationFirewallFirewallRuleWithIdRequest{
		ApiService: a,
		ctx: ctx,
		location: location,
		projectId: projectId,
		firewallName: firewallName,
		firewallRuleId: firewallRuleId,
	}
}

// Execute executes the request
//  @return FirewallRule
func (a *FirewallRuleApiService) CreateLocationFirewallFirewallRuleWithIdExecute(r ApiCreateLocationFirewallFirewallRuleWithIdRequest) (*FirewallRule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FirewallRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirewallRuleApiService.CreateLocationFirewallFirewallRuleWithId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/firewall/id/{firewall_name}/firewall-rule/{firewall_rule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firewall_name"+"}", url.PathEscape(parameterValueToString(r.firewallName, "firewallName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firewall_rule_id"+"}", url.PathEscape(parameterValueToString(r.firewallRuleId, "firewallRuleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createFirewallRuleRequest == nil {
		return localVarReturnValue, nil, reportError("createFirewallRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createFirewallRuleRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateLocationFirewallRuleRequest struct {
	ctx context.Context
	ApiService *FirewallRuleApiService
	firewallName string
	location string
	projectId string
	createFirewallRuleRequest *CreateFirewallRuleRequest
}

func (r ApiCreateLocationFirewallRuleRequest) CreateFirewallRuleRequest(createFirewallRuleRequest CreateFirewallRuleRequest) ApiCreateLocationFirewallRuleRequest {
	r.createFirewallRuleRequest = &createFirewallRuleRequest
	return r
}

func (r ApiCreateLocationFirewallRuleRequest) Execute() (*FirewallRule, *http.Response, error) {
	return r.ApiService.CreateLocationFirewallRuleExecute(r)
}

/*
CreateLocationFirewallRule Create a new firewall rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param firewallName Name of the firewall
 @param location The Ubicloud location/region
 @param projectId ID of the project
 @return ApiCreateLocationFirewallRuleRequest
*/
func (a *FirewallRuleApiService) CreateLocationFirewallRule(ctx context.Context, firewallName string, location string, projectId string) ApiCreateLocationFirewallRuleRequest {
	return ApiCreateLocationFirewallRuleRequest{
		ApiService: a,
		ctx: ctx,
		firewallName: firewallName,
		location: location,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return FirewallRule
func (a *FirewallRuleApiService) CreateLocationFirewallRuleExecute(r ApiCreateLocationFirewallRuleRequest) (*FirewallRule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FirewallRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirewallRuleApiService.CreateLocationFirewallRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/firewall/{firewall_name}/firewall-rule"
	localVarPath = strings.Replace(localVarPath, "{"+"firewall_name"+"}", url.PathEscape(parameterValueToString(r.firewallName, "firewallName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createFirewallRuleRequest == nil {
		return localVarReturnValue, nil, reportError("createFirewallRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createFirewallRuleRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateLocationFirewallRuleWithIdRequest struct {
	ctx context.Context
	ApiService *FirewallRuleApiService
	firewallName string
	location string
	projectId string
	createFirewallRuleRequest *CreateFirewallRuleRequest
}

func (r ApiCreateLocationFirewallRuleWithIdRequest) CreateFirewallRuleRequest(createFirewallRuleRequest CreateFirewallRuleRequest) ApiCreateLocationFirewallRuleWithIdRequest {
	r.createFirewallRuleRequest = &createFirewallRuleRequest
	return r
}

func (r ApiCreateLocationFirewallRuleWithIdRequest) Execute() (*FirewallRule, *http.Response, error) {
	return r.ApiService.CreateLocationFirewallRuleWithIdExecute(r)
}

/*
CreateLocationFirewallRuleWithId Create a new firewall rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param firewallName Name of the firewall
 @param location The Ubicloud location/region
 @param projectId ID of the project
 @return ApiCreateLocationFirewallRuleWithIdRequest
*/
func (a *FirewallRuleApiService) CreateLocationFirewallRuleWithId(ctx context.Context, firewallName string, location string, projectId string) ApiCreateLocationFirewallRuleWithIdRequest {
	return ApiCreateLocationFirewallRuleWithIdRequest{
		ApiService: a,
		ctx: ctx,
		firewallName: firewallName,
		location: location,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return FirewallRule
func (a *FirewallRuleApiService) CreateLocationFirewallRuleWithIdExecute(r ApiCreateLocationFirewallRuleWithIdRequest) (*FirewallRule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FirewallRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirewallRuleApiService.CreateLocationFirewallRuleWithId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/firewall/id/{firewall_name}/firewall-rule"
	localVarPath = strings.Replace(localVarPath, "{"+"firewall_name"+"}", url.PathEscape(parameterValueToString(r.firewallName, "firewallName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createFirewallRuleRequest == nil {
		return localVarReturnValue, nil, reportError("createFirewallRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createFirewallRuleRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteFirewallRuleRequest struct {
	ctx context.Context
	ApiService *FirewallRuleApiService
	projectId string
	firewallName string
	firewallRuleId string
}

func (r ApiDeleteFirewallRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFirewallRuleExecute(r)
}

/*
DeleteFirewallRule Delete a specific firewall rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param firewallName Name of the firewall
 @param firewallRuleId ID of the firewall rule
 @return ApiDeleteFirewallRuleRequest
*/
func (a *FirewallRuleApiService) DeleteFirewallRule(ctx context.Context, projectId string, firewallName string, firewallRuleId string) ApiDeleteFirewallRuleRequest {
	return ApiDeleteFirewallRuleRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		firewallName: firewallName,
		firewallRuleId: firewallRuleId,
	}
}

// Execute executes the request
func (a *FirewallRuleApiService) DeleteFirewallRuleExecute(r ApiDeleteFirewallRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirewallRuleApiService.DeleteFirewallRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/firewall/{firewall_name}/firewall-rule/{firewall_rule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firewall_name"+"}", url.PathEscape(parameterValueToString(r.firewallName, "firewallName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firewall_rule_id"+"}", url.PathEscape(parameterValueToString(r.firewallRuleId, "firewallRuleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteLocationFirewallFirewallRuleRequest struct {
	ctx context.Context
	ApiService *FirewallRuleApiService
	location string
	projectId string
	firewallName string
	firewallRuleId string
}

func (r ApiDeleteLocationFirewallFirewallRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLocationFirewallFirewallRuleExecute(r)
}

/*
DeleteLocationFirewallFirewallRule Delete a specific firewall rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param location The Ubicloud location/region
 @param projectId ID of the project
 @param firewallName Name of the firewall
 @param firewallRuleId ID of the firewall rule
 @return ApiDeleteLocationFirewallFirewallRuleRequest
*/
func (a *FirewallRuleApiService) DeleteLocationFirewallFirewallRule(ctx context.Context, location string, projectId string, firewallName string, firewallRuleId string) ApiDeleteLocationFirewallFirewallRuleRequest {
	return ApiDeleteLocationFirewallFirewallRuleRequest{
		ApiService: a,
		ctx: ctx,
		location: location,
		projectId: projectId,
		firewallName: firewallName,
		firewallRuleId: firewallRuleId,
	}
}

// Execute executes the request
func (a *FirewallRuleApiService) DeleteLocationFirewallFirewallRuleExecute(r ApiDeleteLocationFirewallFirewallRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirewallRuleApiService.DeleteLocationFirewallFirewallRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/firewall/{firewall_name}/firewall-rule/{firewall_rule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firewall_name"+"}", url.PathEscape(parameterValueToString(r.firewallName, "firewallName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firewall_rule_id"+"}", url.PathEscape(parameterValueToString(r.firewallRuleId, "firewallRuleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteLocationFirewallFirewallRuleWithIdRequest struct {
	ctx context.Context
	ApiService *FirewallRuleApiService
	location string
	projectId string
	firewallName string
	firewallRuleId string
}

func (r ApiDeleteLocationFirewallFirewallRuleWithIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLocationFirewallFirewallRuleWithIdExecute(r)
}

/*
DeleteLocationFirewallFirewallRuleWithId Delete a specific firewall rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param location The Ubicloud location/region
 @param projectId ID of the project
 @param firewallName Name of the firewall
 @param firewallRuleId ID of the firewall rule
 @return ApiDeleteLocationFirewallFirewallRuleWithIdRequest
*/
func (a *FirewallRuleApiService) DeleteLocationFirewallFirewallRuleWithId(ctx context.Context, location string, projectId string, firewallName string, firewallRuleId string) ApiDeleteLocationFirewallFirewallRuleWithIdRequest {
	return ApiDeleteLocationFirewallFirewallRuleWithIdRequest{
		ApiService: a,
		ctx: ctx,
		location: location,
		projectId: projectId,
		firewallName: firewallName,
		firewallRuleId: firewallRuleId,
	}
}

// Execute executes the request
func (a *FirewallRuleApiService) DeleteLocationFirewallFirewallRuleWithIdExecute(r ApiDeleteLocationFirewallFirewallRuleWithIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirewallRuleApiService.DeleteLocationFirewallFirewallRuleWithId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/firewall/id/{firewall_name}/firewall-rule/{firewall_rule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firewall_name"+"}", url.PathEscape(parameterValueToString(r.firewallName, "firewallName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firewall_rule_id"+"}", url.PathEscape(parameterValueToString(r.firewallRuleId, "firewallRuleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteLocationPostgresFirewallRuleRequest struct {
	ctx context.Context
	ApiService *FirewallRuleApiService
	projectId string
	location string
	postgresDatabaseName string
	firewallRuleId string
}

func (r ApiDeleteLocationPostgresFirewallRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLocationPostgresFirewallRuleExecute(r)
}

/*
DeleteLocationPostgresFirewallRule Delete a specific firewall rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param location The Ubicloud location/region
 @param postgresDatabaseName Postgres database name
 @param firewallRuleId ID of the firewall rule
 @return ApiDeleteLocationPostgresFirewallRuleRequest
*/
func (a *FirewallRuleApiService) DeleteLocationPostgresFirewallRule(ctx context.Context, projectId string, location string, postgresDatabaseName string, firewallRuleId string) ApiDeleteLocationPostgresFirewallRuleRequest {
	return ApiDeleteLocationPostgresFirewallRuleRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		location: location,
		postgresDatabaseName: postgresDatabaseName,
		firewallRuleId: firewallRuleId,
	}
}

// Execute executes the request
func (a *FirewallRuleApiService) DeleteLocationPostgresFirewallRuleExecute(r ApiDeleteLocationPostgresFirewallRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirewallRuleApiService.DeleteLocationPostgresFirewallRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/postgres/{postgres_database_name}/firewall-rule/{firewall_rule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"postgres_database_name"+"}", url.PathEscape(parameterValueToString(r.postgresDatabaseName, "postgresDatabaseName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firewall_rule_id"+"}", url.PathEscape(parameterValueToString(r.firewallRuleId, "firewallRuleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteLocationPostgresFirewallRuleWithIdRequest struct {
	ctx context.Context
	ApiService *FirewallRuleApiService
	location string
	postgresDatabaseId string
	projectId string
	firewallRuleId string
}

func (r ApiDeleteLocationPostgresFirewallRuleWithIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLocationPostgresFirewallRuleWithIdExecute(r)
}

/*
DeleteLocationPostgresFirewallRuleWithId Delete a specific Postgres firewall rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param location The Ubicloud location/region
 @param postgresDatabaseId Postgres database ID
 @param projectId ID of the project
 @param firewallRuleId ID of the firewall rule
 @return ApiDeleteLocationPostgresFirewallRuleWithIdRequest
*/
func (a *FirewallRuleApiService) DeleteLocationPostgresFirewallRuleWithId(ctx context.Context, location string, postgresDatabaseId string, projectId string, firewallRuleId string) ApiDeleteLocationPostgresFirewallRuleWithIdRequest {
	return ApiDeleteLocationPostgresFirewallRuleWithIdRequest{
		ApiService: a,
		ctx: ctx,
		location: location,
		postgresDatabaseId: postgresDatabaseId,
		projectId: projectId,
		firewallRuleId: firewallRuleId,
	}
}

// Execute executes the request
func (a *FirewallRuleApiService) DeleteLocationPostgresFirewallRuleWithIdExecute(r ApiDeleteLocationPostgresFirewallRuleWithIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirewallRuleApiService.DeleteLocationPostgresFirewallRuleWithId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/postgres/id/{postgres_database_id}/firewall-rule/{firewall_rule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"postgres_database_id"+"}", url.PathEscape(parameterValueToString(r.postgresDatabaseId, "postgresDatabaseId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firewall_rule_id"+"}", url.PathEscape(parameterValueToString(r.firewallRuleId, "firewallRuleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFirewallRuleDetailsRequest struct {
	ctx context.Context
	ApiService *FirewallRuleApiService
	projectId string
	firewallName string
	firewallRuleId string
}

func (r ApiGetFirewallRuleDetailsRequest) Execute() (*FirewallRule, *http.Response, error) {
	return r.ApiService.GetFirewallRuleDetailsExecute(r)
}

/*
GetFirewallRuleDetails Get details of a firewall rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param firewallName Name of the firewall
 @param firewallRuleId ID of the firewall rule
 @return ApiGetFirewallRuleDetailsRequest
*/
func (a *FirewallRuleApiService) GetFirewallRuleDetails(ctx context.Context, projectId string, firewallName string, firewallRuleId string) ApiGetFirewallRuleDetailsRequest {
	return ApiGetFirewallRuleDetailsRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		firewallName: firewallName,
		firewallRuleId: firewallRuleId,
	}
}

// Execute executes the request
//  @return FirewallRule
func (a *FirewallRuleApiService) GetFirewallRuleDetailsExecute(r ApiGetFirewallRuleDetailsRequest) (*FirewallRule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FirewallRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirewallRuleApiService.GetFirewallRuleDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/firewall/{firewall_name}/firewall-rule/{firewall_rule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firewall_name"+"}", url.PathEscape(parameterValueToString(r.firewallName, "firewallName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firewall_rule_id"+"}", url.PathEscape(parameterValueToString(r.firewallRuleId, "firewallRuleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLocationFirewallFirewallRuleDetailsRequest struct {
	ctx context.Context
	ApiService *FirewallRuleApiService
	location string
	projectId string
	firewallName string
	firewallRuleId string
}

func (r ApiGetLocationFirewallFirewallRuleDetailsRequest) Execute() (*FirewallRule, *http.Response, error) {
	return r.ApiService.GetLocationFirewallFirewallRuleDetailsExecute(r)
}

/*
GetLocationFirewallFirewallRuleDetails Get details of a firewall rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param location The Ubicloud location/region
 @param projectId ID of the project
 @param firewallName Name of the firewall
 @param firewallRuleId ID of the firewall rule
 @return ApiGetLocationFirewallFirewallRuleDetailsRequest
*/
func (a *FirewallRuleApiService) GetLocationFirewallFirewallRuleDetails(ctx context.Context, location string, projectId string, firewallName string, firewallRuleId string) ApiGetLocationFirewallFirewallRuleDetailsRequest {
	return ApiGetLocationFirewallFirewallRuleDetailsRequest{
		ApiService: a,
		ctx: ctx,
		location: location,
		projectId: projectId,
		firewallName: firewallName,
		firewallRuleId: firewallRuleId,
	}
}

// Execute executes the request
//  @return FirewallRule
func (a *FirewallRuleApiService) GetLocationFirewallFirewallRuleDetailsExecute(r ApiGetLocationFirewallFirewallRuleDetailsRequest) (*FirewallRule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FirewallRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirewallRuleApiService.GetLocationFirewallFirewallRuleDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/firewall/{firewall_name}/firewall-rule/{firewall_rule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firewall_name"+"}", url.PathEscape(parameterValueToString(r.firewallName, "firewallName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firewall_rule_id"+"}", url.PathEscape(parameterValueToString(r.firewallRuleId, "firewallRuleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLocationFirewallFirewallRuleDetailsWithIdRequest struct {
	ctx context.Context
	ApiService *FirewallRuleApiService
	location string
	projectId string
	firewallName string
	firewallRuleId string
}

func (r ApiGetLocationFirewallFirewallRuleDetailsWithIdRequest) Execute() (*FirewallRule, *http.Response, error) {
	return r.ApiService.GetLocationFirewallFirewallRuleDetailsWithIdExecute(r)
}

/*
GetLocationFirewallFirewallRuleDetailsWithId Get details of a firewall rule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param location The Ubicloud location/region
 @param projectId ID of the project
 @param firewallName Name of the firewall
 @param firewallRuleId ID of the firewall rule
 @return ApiGetLocationFirewallFirewallRuleDetailsWithIdRequest
*/
func (a *FirewallRuleApiService) GetLocationFirewallFirewallRuleDetailsWithId(ctx context.Context, location string, projectId string, firewallName string, firewallRuleId string) ApiGetLocationFirewallFirewallRuleDetailsWithIdRequest {
	return ApiGetLocationFirewallFirewallRuleDetailsWithIdRequest{
		ApiService: a,
		ctx: ctx,
		location: location,
		projectId: projectId,
		firewallName: firewallName,
		firewallRuleId: firewallRuleId,
	}
}

// Execute executes the request
//  @return FirewallRule
func (a *FirewallRuleApiService) GetLocationFirewallFirewallRuleDetailsWithIdExecute(r ApiGetLocationFirewallFirewallRuleDetailsWithIdRequest) (*FirewallRule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FirewallRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirewallRuleApiService.GetLocationFirewallFirewallRuleDetailsWithId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/firewall/id/{firewall_name}/firewall-rule/{firewall_rule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firewall_name"+"}", url.PathEscape(parameterValueToString(r.firewallName, "firewallName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firewall_rule_id"+"}", url.PathEscape(parameterValueToString(r.firewallRuleId, "firewallRuleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
