/*
Clover API

API for managing resources on Ubicloud

API version: 0.1.0
Contact: support@ubicloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiCreateLocationKubernetesVMRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	projectId string
	location string
	kubernetesVmName string
	createLocationKubernetesVMRequest *CreateLocationKubernetesVMRequest
}

func (r ApiCreateLocationKubernetesVMRequest) CreateLocationKubernetesVMRequest(createLocationKubernetesVMRequest CreateLocationKubernetesVMRequest) ApiCreateLocationKubernetesVMRequest {
	r.createLocationKubernetesVMRequest = &createLocationKubernetesVMRequest
	return r
}

func (r ApiCreateLocationKubernetesVMRequest) Execute() (*VmDetailed, *http.Response, error) {
	return r.ApiService.CreateLocationKubernetesVMExecute(r)
}

/*
CreateLocationKubernetesVM Create Kubernetes VM in a specific location of a project

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param location The Ubicloud location/region
 @param kubernetesVmName Kubernetes vm name
 @return ApiCreateLocationKubernetesVMRequest
*/
func (a *DefaultApiService) CreateLocationKubernetesVM(ctx context.Context, projectId string, location string, kubernetesVmName string) ApiCreateLocationKubernetesVMRequest {
	return ApiCreateLocationKubernetesVMRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		location: location,
		kubernetesVmName: kubernetesVmName,
	}
}

// Execute executes the request
//  @return VmDetailed
func (a *DefaultApiService) CreateLocationKubernetesVMExecute(r ApiCreateLocationKubernetesVMRequest) (*VmDetailed, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VmDetailed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateLocationKubernetesVM")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/kubernetes-vm/{kubernetes_vm_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kubernetes_vm_name"+"}", url.PathEscape(parameterValueToString(r.kubernetesVmName, "kubernetesVmName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createLocationKubernetesVMRequest == nil {
		return localVarReturnValue, nil, reportError("createLocationKubernetesVMRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createLocationKubernetesVMRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
