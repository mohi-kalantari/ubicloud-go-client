/*
Clover API

API for managing resources on Ubicloud

API version: 0.1.0
Contact: support@ubicloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PostgresApiService PostgresApi service
type PostgresApiService service

type ApiCreatePostgresDatabaseRequest struct {
	ctx context.Context
	ApiService *PostgresApiService
	projectId string
	location string
	postgresDatabaseName string
	createPostgresDatabaseRequest *CreatePostgresDatabaseRequest
}

func (r ApiCreatePostgresDatabaseRequest) CreatePostgresDatabaseRequest(createPostgresDatabaseRequest CreatePostgresDatabaseRequest) ApiCreatePostgresDatabaseRequest {
	r.createPostgresDatabaseRequest = &createPostgresDatabaseRequest
	return r
}

func (r ApiCreatePostgresDatabaseRequest) Execute() (*PostgresDetailed, *http.Response, error) {
	return r.ApiService.CreatePostgresDatabaseExecute(r)
}

/*
CreatePostgresDatabase Create a new Postgres database in a specific location of a project

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param location The Ubicloud location/region
 @param postgresDatabaseName Postgres database name
 @return ApiCreatePostgresDatabaseRequest
*/
func (a *PostgresApiService) CreatePostgresDatabase(ctx context.Context, projectId string, location string, postgresDatabaseName string) ApiCreatePostgresDatabaseRequest {
	return ApiCreatePostgresDatabaseRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		location: location,
		postgresDatabaseName: postgresDatabaseName,
	}
}

// Execute executes the request
//  @return PostgresDetailed
func (a *PostgresApiService) CreatePostgresDatabaseExecute(r ApiCreatePostgresDatabaseRequest) (*PostgresDetailed, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostgresDetailed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostgresApiService.CreatePostgresDatabase")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/postgres/{postgres_database_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"postgres_database_name"+"}", url.PathEscape(parameterValueToString(r.postgresDatabaseName, "postgresDatabaseName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createPostgresDatabaseRequest == nil {
		return localVarReturnValue, nil, reportError("createPostgresDatabaseRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createPostgresDatabaseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletePostgresDatabaseRequest struct {
	ctx context.Context
	ApiService *PostgresApiService
	projectId string
	location string
	postgresDatabaseName string
}

func (r ApiDeletePostgresDatabaseRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePostgresDatabaseExecute(r)
}

/*
DeletePostgresDatabase Delete a specific Postgres database

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param location The Ubicloud location/region
 @param postgresDatabaseName Postgres database name
 @return ApiDeletePostgresDatabaseRequest
*/
func (a *PostgresApiService) DeletePostgresDatabase(ctx context.Context, projectId string, location string, postgresDatabaseName string) ApiDeletePostgresDatabaseRequest {
	return ApiDeletePostgresDatabaseRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		location: location,
		postgresDatabaseName: postgresDatabaseName,
	}
}

// Execute executes the request
func (a *PostgresApiService) DeletePostgresDatabaseExecute(r ApiDeletePostgresDatabaseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostgresApiService.DeletePostgresDatabase")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/postgres/{postgres_database_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"postgres_database_name"+"}", url.PathEscape(parameterValueToString(r.postgresDatabaseName, "postgresDatabaseName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeletePostgresDatabaseWithIDRequest struct {
	ctx context.Context
	ApiService *PostgresApiService
	projectId string
	location string
	postgresDatabaseId string
}

func (r ApiDeletePostgresDatabaseWithIDRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePostgresDatabaseWithIDExecute(r)
}

/*
DeletePostgresDatabaseWithID Delete a specific Postgres database with ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param location The Ubicloud location/region
 @param postgresDatabaseId Postgres database ID
 @return ApiDeletePostgresDatabaseWithIDRequest
*/
func (a *PostgresApiService) DeletePostgresDatabaseWithID(ctx context.Context, projectId string, location string, postgresDatabaseId string) ApiDeletePostgresDatabaseWithIDRequest {
	return ApiDeletePostgresDatabaseWithIDRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		location: location,
		postgresDatabaseId: postgresDatabaseId,
	}
}

// Execute executes the request
func (a *PostgresApiService) DeletePostgresDatabaseWithIDExecute(r ApiDeletePostgresDatabaseWithIDRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostgresApiService.DeletePostgresDatabaseWithID")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/postgres/id/{postgres_database_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"postgres_database_id"+"}", url.PathEscape(parameterValueToString(r.postgresDatabaseId, "postgresDatabaseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiFailoverPostgresDatabaseWithIDRequest struct {
	ctx context.Context
	ApiService *PostgresApiService
	projectId string
	location string
	postgresDatabaseId string
}

func (r ApiFailoverPostgresDatabaseWithIDRequest) Execute() (*PostgresDetailed, *http.Response, error) {
	return r.ApiService.FailoverPostgresDatabaseWithIDExecute(r)
}

/*
FailoverPostgresDatabaseWithID Failover a specific Postgres database with ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param location The Ubicloud location/region
 @param postgresDatabaseId Postgres database ID
 @return ApiFailoverPostgresDatabaseWithIDRequest
*/
func (a *PostgresApiService) FailoverPostgresDatabaseWithID(ctx context.Context, projectId string, location string, postgresDatabaseId string) ApiFailoverPostgresDatabaseWithIDRequest {
	return ApiFailoverPostgresDatabaseWithIDRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		location: location,
		postgresDatabaseId: postgresDatabaseId,
	}
}

// Execute executes the request
//  @return PostgresDetailed
func (a *PostgresApiService) FailoverPostgresDatabaseWithIDExecute(r ApiFailoverPostgresDatabaseWithIDRequest) (*PostgresDetailed, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostgresDetailed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostgresApiService.FailoverPostgresDatabaseWithID")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/postgres/_{postgres_database_id}/failover"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"postgres_database_id"+"}", url.PathEscape(parameterValueToString(r.postgresDatabaseId, "postgresDatabaseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPostgresDatabaseDetailsRequest struct {
	ctx context.Context
	ApiService *PostgresApiService
	projectId string
	location string
	postgresDatabaseName string
}

func (r ApiGetPostgresDatabaseDetailsRequest) Execute() (*PostgresDetailed, *http.Response, error) {
	return r.ApiService.GetPostgresDatabaseDetailsExecute(r)
}

/*
GetPostgresDatabaseDetails Get details of a specific Postgres database in a location

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param location The Ubicloud location/region
 @param postgresDatabaseName Postgres database name
 @return ApiGetPostgresDatabaseDetailsRequest
*/
func (a *PostgresApiService) GetPostgresDatabaseDetails(ctx context.Context, projectId string, location string, postgresDatabaseName string) ApiGetPostgresDatabaseDetailsRequest {
	return ApiGetPostgresDatabaseDetailsRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		location: location,
		postgresDatabaseName: postgresDatabaseName,
	}
}

// Execute executes the request
//  @return PostgresDetailed
func (a *PostgresApiService) GetPostgresDatabaseDetailsExecute(r ApiGetPostgresDatabaseDetailsRequest) (*PostgresDetailed, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostgresDetailed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostgresApiService.GetPostgresDatabaseDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/postgres/{postgres_database_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"postgres_database_name"+"}", url.PathEscape(parameterValueToString(r.postgresDatabaseName, "postgresDatabaseName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPostgresDetailsWithIdRequest struct {
	ctx context.Context
	ApiService *PostgresApiService
	projectId string
	location string
	postgresDatabaseId string
}

func (r ApiGetPostgresDetailsWithIdRequest) Execute() (*PostgresDetailed, *http.Response, error) {
	return r.ApiService.GetPostgresDetailsWithIdExecute(r)
}

/*
GetPostgresDetailsWithId Get details of a specific Postgres database in a location with ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param location The Ubicloud location/region
 @param postgresDatabaseId Postgres database ID
 @return ApiGetPostgresDetailsWithIdRequest
*/
func (a *PostgresApiService) GetPostgresDetailsWithId(ctx context.Context, projectId string, location string, postgresDatabaseId string) ApiGetPostgresDetailsWithIdRequest {
	return ApiGetPostgresDetailsWithIdRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		location: location,
		postgresDatabaseId: postgresDatabaseId,
	}
}

// Execute executes the request
//  @return PostgresDetailed
func (a *PostgresApiService) GetPostgresDetailsWithIdExecute(r ApiGetPostgresDetailsWithIdRequest) (*PostgresDetailed, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostgresDetailed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostgresApiService.GetPostgresDetailsWithId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/postgres/id/{postgres_database_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"postgres_database_id"+"}", url.PathEscape(parameterValueToString(r.postgresDatabaseId, "postgresDatabaseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListLocationPostgresDatabasesRequest struct {
	ctx context.Context
	ApiService *PostgresApiService
	projectId string
	location string
	startAfter *string
	pageSize *int32
	orderColumn *string
}

// Pagination - Start after
func (r ApiListLocationPostgresDatabasesRequest) StartAfter(startAfter string) ApiListLocationPostgresDatabasesRequest {
	r.startAfter = &startAfter
	return r
}

// Pagination - Page size
func (r ApiListLocationPostgresDatabasesRequest) PageSize(pageSize int32) ApiListLocationPostgresDatabasesRequest {
	r.pageSize = &pageSize
	return r
}

// Pagination - Order column
func (r ApiListLocationPostgresDatabasesRequest) OrderColumn(orderColumn string) ApiListLocationPostgresDatabasesRequest {
	r.orderColumn = &orderColumn
	return r
}

func (r ApiListLocationPostgresDatabasesRequest) Execute() (*ListLocationPostgresDatabases200Response, *http.Response, error) {
	return r.ApiService.ListLocationPostgresDatabasesExecute(r)
}

/*
ListLocationPostgresDatabases List Postgres databases in a specific location of a project

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param location The Ubicloud location/region
 @return ApiListLocationPostgresDatabasesRequest
*/
func (a *PostgresApiService) ListLocationPostgresDatabases(ctx context.Context, projectId string, location string) ApiListLocationPostgresDatabasesRequest {
	return ApiListLocationPostgresDatabasesRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		location: location,
	}
}

// Execute executes the request
//  @return ListLocationPostgresDatabases200Response
func (a *PostgresApiService) ListLocationPostgresDatabasesExecute(r ApiListLocationPostgresDatabasesRequest) (*ListLocationPostgresDatabases200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListLocationPostgresDatabases200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostgresApiService.ListLocationPostgresDatabases")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/postgres"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_after", r.startAfter, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
	}
	if r.orderColumn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_column", r.orderColumn, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPostgresDatabasesRequest struct {
	ctx context.Context
	ApiService *PostgresApiService
	projectId string
	startAfter *string
	pageSize *int32
	orderColumn *string
}

// Pagination - Start after
func (r ApiListPostgresDatabasesRequest) StartAfter(startAfter string) ApiListPostgresDatabasesRequest {
	r.startAfter = &startAfter
	return r
}

// Pagination - Page size
func (r ApiListPostgresDatabasesRequest) PageSize(pageSize int32) ApiListPostgresDatabasesRequest {
	r.pageSize = &pageSize
	return r
}

// Pagination - Order column
func (r ApiListPostgresDatabasesRequest) OrderColumn(orderColumn string) ApiListPostgresDatabasesRequest {
	r.orderColumn = &orderColumn
	return r
}

func (r ApiListPostgresDatabasesRequest) Execute() (*ListLocationPostgresDatabases200Response, *http.Response, error) {
	return r.ApiService.ListPostgresDatabasesExecute(r)
}

/*
ListPostgresDatabases List visible Postgres databases

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @return ApiListPostgresDatabasesRequest
*/
func (a *PostgresApiService) ListPostgresDatabases(ctx context.Context, projectId string) ApiListPostgresDatabasesRequest {
	return ApiListPostgresDatabasesRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return ListLocationPostgresDatabases200Response
func (a *PostgresApiService) ListPostgresDatabasesExecute(r ApiListPostgresDatabasesRequest) (*ListLocationPostgresDatabases200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListLocationPostgresDatabases200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostgresApiService.ListPostgresDatabases")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/postgres"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_after", r.startAfter, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
	}
	if r.orderColumn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_column", r.orderColumn, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResetSuperuserPasswordRequest struct {
	ctx context.Context
	ApiService *PostgresApiService
	projectId string
	location string
	postgresDatabaseName string
	resetSuperuserPasswordWithIDRequest *ResetSuperuserPasswordWithIDRequest
}

func (r ApiResetSuperuserPasswordRequest) ResetSuperuserPasswordWithIDRequest(resetSuperuserPasswordWithIDRequest ResetSuperuserPasswordWithIDRequest) ApiResetSuperuserPasswordRequest {
	r.resetSuperuserPasswordWithIDRequest = &resetSuperuserPasswordWithIDRequest
	return r
}

func (r ApiResetSuperuserPasswordRequest) Execute() (*PostgresDetailed, *http.Response, error) {
	return r.ApiService.ResetSuperuserPasswordExecute(r)
}

/*
ResetSuperuserPassword Reset superuser password of the Postgres database

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param location The Ubicloud location/region
 @param postgresDatabaseName Postgres database name
 @return ApiResetSuperuserPasswordRequest
*/
func (a *PostgresApiService) ResetSuperuserPassword(ctx context.Context, projectId string, location string, postgresDatabaseName string) ApiResetSuperuserPasswordRequest {
	return ApiResetSuperuserPasswordRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		location: location,
		postgresDatabaseName: postgresDatabaseName,
	}
}

// Execute executes the request
//  @return PostgresDetailed
func (a *PostgresApiService) ResetSuperuserPasswordExecute(r ApiResetSuperuserPasswordRequest) (*PostgresDetailed, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostgresDetailed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostgresApiService.ResetSuperuserPassword")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/postgres/{postgres_database_name}/reset-superuser-password"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"postgres_database_name"+"}", url.PathEscape(parameterValueToString(r.postgresDatabaseName, "postgresDatabaseName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.resetSuperuserPasswordWithIDRequest == nil {
		return localVarReturnValue, nil, reportError("resetSuperuserPasswordWithIDRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resetSuperuserPasswordWithIDRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResetSuperuserPasswordWithIDRequest struct {
	ctx context.Context
	ApiService *PostgresApiService
	projectId string
	location string
	postgresDatabaseId string
	resetSuperuserPasswordWithIDRequest *ResetSuperuserPasswordWithIDRequest
}

func (r ApiResetSuperuserPasswordWithIDRequest) ResetSuperuserPasswordWithIDRequest(resetSuperuserPasswordWithIDRequest ResetSuperuserPasswordWithIDRequest) ApiResetSuperuserPasswordWithIDRequest {
	r.resetSuperuserPasswordWithIDRequest = &resetSuperuserPasswordWithIDRequest
	return r
}

func (r ApiResetSuperuserPasswordWithIDRequest) Execute() (*PostgresDetailed, *http.Response, error) {
	return r.ApiService.ResetSuperuserPasswordWithIDExecute(r)
}

/*
ResetSuperuserPasswordWithID Reset super-user password of the Postgres database

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param location The Ubicloud location/region
 @param postgresDatabaseId Postgres database ID
 @return ApiResetSuperuserPasswordWithIDRequest
*/
func (a *PostgresApiService) ResetSuperuserPasswordWithID(ctx context.Context, projectId string, location string, postgresDatabaseId string) ApiResetSuperuserPasswordWithIDRequest {
	return ApiResetSuperuserPasswordWithIDRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		location: location,
		postgresDatabaseId: postgresDatabaseId,
	}
}

// Execute executes the request
//  @return PostgresDetailed
func (a *PostgresApiService) ResetSuperuserPasswordWithIDExecute(r ApiResetSuperuserPasswordWithIDRequest) (*PostgresDetailed, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostgresDetailed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostgresApiService.ResetSuperuserPasswordWithID")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/postgres/id/{postgres_database_id}/reset-superuser-password"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"postgres_database_id"+"}", url.PathEscape(parameterValueToString(r.postgresDatabaseId, "postgresDatabaseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.resetSuperuserPasswordWithIDRequest == nil {
		return localVarReturnValue, nil, reportError("resetSuperuserPasswordWithIDRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resetSuperuserPasswordWithIDRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestorePostgresDatabaseRequest struct {
	ctx context.Context
	ApiService *PostgresApiService
	projectId string
	location string
	postgresDatabaseName string
	restorePostgresDatabaseWithIDRequest *RestorePostgresDatabaseWithIDRequest
}

func (r ApiRestorePostgresDatabaseRequest) RestorePostgresDatabaseWithIDRequest(restorePostgresDatabaseWithIDRequest RestorePostgresDatabaseWithIDRequest) ApiRestorePostgresDatabaseRequest {
	r.restorePostgresDatabaseWithIDRequest = &restorePostgresDatabaseWithIDRequest
	return r
}

func (r ApiRestorePostgresDatabaseRequest) Execute() (*PostgresDetailed, *http.Response, error) {
	return r.ApiService.RestorePostgresDatabaseExecute(r)
}

/*
RestorePostgresDatabase Restore a new Postgres database in a specific location of a project

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param location The Ubicloud location/region
 @param postgresDatabaseName Postgres database name
 @return ApiRestorePostgresDatabaseRequest
*/
func (a *PostgresApiService) RestorePostgresDatabase(ctx context.Context, projectId string, location string, postgresDatabaseName string) ApiRestorePostgresDatabaseRequest {
	return ApiRestorePostgresDatabaseRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		location: location,
		postgresDatabaseName: postgresDatabaseName,
	}
}

// Execute executes the request
//  @return PostgresDetailed
func (a *PostgresApiService) RestorePostgresDatabaseExecute(r ApiRestorePostgresDatabaseRequest) (*PostgresDetailed, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostgresDetailed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostgresApiService.RestorePostgresDatabase")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/postgres/{postgres_database_name}/restore"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"postgres_database_name"+"}", url.PathEscape(parameterValueToString(r.postgresDatabaseName, "postgresDatabaseName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.restorePostgresDatabaseWithIDRequest == nil {
		return localVarReturnValue, nil, reportError("restorePostgresDatabaseWithIDRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.restorePostgresDatabaseWithIDRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestorePostgresDatabaseWithIDRequest struct {
	ctx context.Context
	ApiService *PostgresApiService
	projectId string
	location string
	postgresDatabaseId string
	restorePostgresDatabaseWithIDRequest *RestorePostgresDatabaseWithIDRequest
}

func (r ApiRestorePostgresDatabaseWithIDRequest) RestorePostgresDatabaseWithIDRequest(restorePostgresDatabaseWithIDRequest RestorePostgresDatabaseWithIDRequest) ApiRestorePostgresDatabaseWithIDRequest {
	r.restorePostgresDatabaseWithIDRequest = &restorePostgresDatabaseWithIDRequest
	return r
}

func (r ApiRestorePostgresDatabaseWithIDRequest) Execute() (*Postgres, *http.Response, error) {
	return r.ApiService.RestorePostgresDatabaseWithIDExecute(r)
}

/*
RestorePostgresDatabaseWithID Restore a new Postgres database in a specific location of a project with ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param location The Ubicloud location/region
 @param postgresDatabaseId Postgres database ID
 @return ApiRestorePostgresDatabaseWithIDRequest
*/
func (a *PostgresApiService) RestorePostgresDatabaseWithID(ctx context.Context, projectId string, location string, postgresDatabaseId string) ApiRestorePostgresDatabaseWithIDRequest {
	return ApiRestorePostgresDatabaseWithIDRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		location: location,
		postgresDatabaseId: postgresDatabaseId,
	}
}

// Execute executes the request
//  @return Postgres
func (a *PostgresApiService) RestorePostgresDatabaseWithIDExecute(r ApiRestorePostgresDatabaseWithIDRequest) (*Postgres, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Postgres
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostgresApiService.RestorePostgresDatabaseWithID")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/postgres/id/{postgres_database_id}/restore"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"postgres_database_id"+"}", url.PathEscape(parameterValueToString(r.postgresDatabaseId, "postgresDatabaseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.restorePostgresDatabaseWithIDRequest == nil {
		return localVarReturnValue, nil, reportError("restorePostgresDatabaseWithIDRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.restorePostgresDatabaseWithIDRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
