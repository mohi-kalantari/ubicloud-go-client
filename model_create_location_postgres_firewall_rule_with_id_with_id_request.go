/*
Clover API

API for managing resources on Ubicloud

API version: 0.1.0
Contact: support@ubicloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateLocationPostgresFirewallRuleWithIdWithIdRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateLocationPostgresFirewallRuleWithIdWithIdRequest{}

// CreateLocationPostgresFirewallRuleWithIdWithIdRequest struct for CreateLocationPostgresFirewallRuleWithIdWithIdRequest
type CreateLocationPostgresFirewallRuleWithIdWithIdRequest struct {
	// CIDR of the Postgres firewall rule
	Cidr string `json:"cidr"`
}

// NewCreateLocationPostgresFirewallRuleWithIdWithIdRequest instantiates a new CreateLocationPostgresFirewallRuleWithIdWithIdRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateLocationPostgresFirewallRuleWithIdWithIdRequest(cidr string) *CreateLocationPostgresFirewallRuleWithIdWithIdRequest {
	this := CreateLocationPostgresFirewallRuleWithIdWithIdRequest{}
	this.Cidr = cidr
	return &this
}

// NewCreateLocationPostgresFirewallRuleWithIdWithIdRequestWithDefaults instantiates a new CreateLocationPostgresFirewallRuleWithIdWithIdRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateLocationPostgresFirewallRuleWithIdWithIdRequestWithDefaults() *CreateLocationPostgresFirewallRuleWithIdWithIdRequest {
	this := CreateLocationPostgresFirewallRuleWithIdWithIdRequest{}
	return &this
}

// GetCidr returns the Cidr field value
func (o *CreateLocationPostgresFirewallRuleWithIdWithIdRequest) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *CreateLocationPostgresFirewallRuleWithIdWithIdRequest) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *CreateLocationPostgresFirewallRuleWithIdWithIdRequest) SetCidr(v string) {
	o.Cidr = v
}

func (o CreateLocationPostgresFirewallRuleWithIdWithIdRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateLocationPostgresFirewallRuleWithIdWithIdRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cidr"] = o.Cidr
	return toSerialize, nil
}

type NullableCreateLocationPostgresFirewallRuleWithIdWithIdRequest struct {
	value *CreateLocationPostgresFirewallRuleWithIdWithIdRequest
	isSet bool
}

func (v NullableCreateLocationPostgresFirewallRuleWithIdWithIdRequest) Get() *CreateLocationPostgresFirewallRuleWithIdWithIdRequest {
	return v.value
}

func (v *NullableCreateLocationPostgresFirewallRuleWithIdWithIdRequest) Set(val *CreateLocationPostgresFirewallRuleWithIdWithIdRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateLocationPostgresFirewallRuleWithIdWithIdRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateLocationPostgresFirewallRuleWithIdWithIdRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateLocationPostgresFirewallRuleWithIdWithIdRequest(val *CreateLocationPostgresFirewallRuleWithIdWithIdRequest) *NullableCreateLocationPostgresFirewallRuleWithIdWithIdRequest {
	return &NullableCreateLocationPostgresFirewallRuleWithIdWithIdRequest{value: val, isSet: true}
}

func (v NullableCreateLocationPostgresFirewallRuleWithIdWithIdRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateLocationPostgresFirewallRuleWithIdWithIdRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


