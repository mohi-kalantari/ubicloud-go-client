/*
Clover API

API for managing resources on Ubicloud

API version: 0.1.0
Contact: support@ubicloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Postgres type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Postgres{}

// Postgres struct for Postgres
type Postgres struct {
	// Kind of Postgres database
	Flavor string `json:"flavor"`
	// High availability type
	HaType string `json:"ha_type"`
	// ID of the Postgres database
	Id string `json:"id"`
	// Location of the Postgres database
	Location string `json:"location"`
	// Name of the Postgres database
	Name string `json:"name"`
	// State of the Postgres database
	State string `json:"state"`
	// Storage size in GiB
	StorageSizeGib int32 `json:"storage_size_gib"`
	// Postgres version
	Version string `json:"version"`
	// Size of the underlying VM
	VmSize string `json:"vm_size"`
}

// NewPostgres instantiates a new Postgres object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostgres(flavor string, haType string, id string, location string, name string, state string, storageSizeGib int32, version string, vmSize string) *Postgres {
	this := Postgres{}
	this.Flavor = flavor
	this.HaType = haType
	this.Id = id
	this.Location = location
	this.Name = name
	this.State = state
	this.StorageSizeGib = storageSizeGib
	this.Version = version
	this.VmSize = vmSize
	return &this
}

// NewPostgresWithDefaults instantiates a new Postgres object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostgresWithDefaults() *Postgres {
	this := Postgres{}
	return &this
}

// GetFlavor returns the Flavor field value
func (o *Postgres) GetFlavor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Flavor
}

// GetFlavorOk returns a tuple with the Flavor field value
// and a boolean to check if the value has been set.
func (o *Postgres) GetFlavorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Flavor, true
}

// SetFlavor sets field value
func (o *Postgres) SetFlavor(v string) {
	o.Flavor = v
}

// GetHaType returns the HaType field value
func (o *Postgres) GetHaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HaType
}

// GetHaTypeOk returns a tuple with the HaType field value
// and a boolean to check if the value has been set.
func (o *Postgres) GetHaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HaType, true
}

// SetHaType sets field value
func (o *Postgres) SetHaType(v string) {
	o.HaType = v
}

// GetId returns the Id field value
func (o *Postgres) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Postgres) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Postgres) SetId(v string) {
	o.Id = v
}

// GetLocation returns the Location field value
func (o *Postgres) GetLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *Postgres) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *Postgres) SetLocation(v string) {
	o.Location = v
}

// GetName returns the Name field value
func (o *Postgres) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Postgres) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Postgres) SetName(v string) {
	o.Name = v
}

// GetState returns the State field value
func (o *Postgres) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Postgres) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Postgres) SetState(v string) {
	o.State = v
}

// GetStorageSizeGib returns the StorageSizeGib field value
func (o *Postgres) GetStorageSizeGib() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StorageSizeGib
}

// GetStorageSizeGibOk returns a tuple with the StorageSizeGib field value
// and a boolean to check if the value has been set.
func (o *Postgres) GetStorageSizeGibOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageSizeGib, true
}

// SetStorageSizeGib sets field value
func (o *Postgres) SetStorageSizeGib(v int32) {
	o.StorageSizeGib = v
}

// GetVersion returns the Version field value
func (o *Postgres) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *Postgres) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *Postgres) SetVersion(v string) {
	o.Version = v
}

// GetVmSize returns the VmSize field value
func (o *Postgres) GetVmSize() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VmSize
}

// GetVmSizeOk returns a tuple with the VmSize field value
// and a boolean to check if the value has been set.
func (o *Postgres) GetVmSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VmSize, true
}

// SetVmSize sets field value
func (o *Postgres) SetVmSize(v string) {
	o.VmSize = v
}

func (o Postgres) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Postgres) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["flavor"] = o.Flavor
	toSerialize["ha_type"] = o.HaType
	toSerialize["id"] = o.Id
	toSerialize["location"] = o.Location
	toSerialize["name"] = o.Name
	toSerialize["state"] = o.State
	toSerialize["storage_size_gib"] = o.StorageSizeGib
	toSerialize["version"] = o.Version
	toSerialize["vm_size"] = o.VmSize
	return toSerialize, nil
}

type NullablePostgres struct {
	value *Postgres
	isSet bool
}

func (v NullablePostgres) Get() *Postgres {
	return v.value
}

func (v *NullablePostgres) Set(val *Postgres) {
	v.value = val
	v.isSet = true
}

func (v NullablePostgres) IsSet() bool {
	return v.isSet
}

func (v *NullablePostgres) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostgres(val *Postgres) *NullablePostgres {
	return &NullablePostgres{value: val, isSet: true}
}

func (v NullablePostgres) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostgres) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


