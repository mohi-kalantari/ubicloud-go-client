/*
Clover API

API for managing resources on Ubicloud

API version: 0.1.0
Contact: support@ubicloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Nic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Nic{}

// Nic struct for Nic
type Nic struct {
	// ID of the NIC
	Id string `json:"id"`
	// Name of the NIC
	Name string `json:"name"`
	// Private IPv4 address
	PrivateIpv4 string `json:"private_ipv4"`
	// Private IPv6 address
	PrivateIpv6 string `json:"private_ipv6"`
	// Name of the VM
	VmName NullableString `json:"vm_name"`
}

// NewNic instantiates a new Nic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNic(id string, name string, privateIpv4 string, privateIpv6 string, vmName NullableString) *Nic {
	this := Nic{}
	this.Id = id
	this.Name = name
	this.PrivateIpv4 = privateIpv4
	this.PrivateIpv6 = privateIpv6
	this.VmName = vmName
	return &this
}

// NewNicWithDefaults instantiates a new Nic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNicWithDefaults() *Nic {
	this := Nic{}
	return &this
}

// GetId returns the Id field value
func (o *Nic) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Nic) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Nic) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Nic) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Nic) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Nic) SetName(v string) {
	o.Name = v
}

// GetPrivateIpv4 returns the PrivateIpv4 field value
func (o *Nic) GetPrivateIpv4() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateIpv4
}

// GetPrivateIpv4Ok returns a tuple with the PrivateIpv4 field value
// and a boolean to check if the value has been set.
func (o *Nic) GetPrivateIpv4Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateIpv4, true
}

// SetPrivateIpv4 sets field value
func (o *Nic) SetPrivateIpv4(v string) {
	o.PrivateIpv4 = v
}

// GetPrivateIpv6 returns the PrivateIpv6 field value
func (o *Nic) GetPrivateIpv6() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateIpv6
}

// GetPrivateIpv6Ok returns a tuple with the PrivateIpv6 field value
// and a boolean to check if the value has been set.
func (o *Nic) GetPrivateIpv6Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateIpv6, true
}

// SetPrivateIpv6 sets field value
func (o *Nic) SetPrivateIpv6(v string) {
	o.PrivateIpv6 = v
}

// GetVmName returns the VmName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Nic) GetVmName() string {
	if o == nil || o.VmName.Get() == nil {
		var ret string
		return ret
	}

	return *o.VmName.Get()
}

// GetVmNameOk returns a tuple with the VmName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Nic) GetVmNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VmName.Get(), o.VmName.IsSet()
}

// SetVmName sets field value
func (o *Nic) SetVmName(v string) {
	o.VmName.Set(&v)
}

func (o Nic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Nic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["private_ipv4"] = o.PrivateIpv4
	toSerialize["private_ipv6"] = o.PrivateIpv6
	toSerialize["vm_name"] = o.VmName.Get()
	return toSerialize, nil
}

type NullableNic struct {
	value *Nic
	isSet bool
}

func (v NullableNic) Get() *Nic {
	return v.value
}

func (v *NullableNic) Set(val *Nic) {
	v.value = val
	v.isSet = true
}

func (v NullableNic) IsSet() bool {
	return v.isSet
}

func (v *NullableNic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNic(val *Nic) *NullableNic {
	return &NullableNic{value: val, isSet: true}
}

func (v NullableNic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


