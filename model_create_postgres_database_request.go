/*
Clover API

API for managing resources on Ubicloud

API version: 0.1.0
Contact: support@ubicloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreatePostgresDatabaseRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreatePostgresDatabaseRequest{}

// CreatePostgresDatabaseRequest struct for CreatePostgresDatabaseRequest
type CreatePostgresDatabaseRequest struct {
	// Kind of database
	Flavor *string `json:"flavor,omitempty"`
	// High availability type
	HaType *string `json:"ha_type,omitempty"`
	// Requested size for the underlying VM
	Size string `json:"size"`
	// Requested storage size in GiB
	StorageSize *int32 `json:"storage_size,omitempty"`
}

// NewCreatePostgresDatabaseRequest instantiates a new CreatePostgresDatabaseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePostgresDatabaseRequest(size string) *CreatePostgresDatabaseRequest {
	this := CreatePostgresDatabaseRequest{}
	this.Size = size
	return &this
}

// NewCreatePostgresDatabaseRequestWithDefaults instantiates a new CreatePostgresDatabaseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePostgresDatabaseRequestWithDefaults() *CreatePostgresDatabaseRequest {
	this := CreatePostgresDatabaseRequest{}
	return &this
}

// GetFlavor returns the Flavor field value if set, zero value otherwise.
func (o *CreatePostgresDatabaseRequest) GetFlavor() string {
	if o == nil || IsNil(o.Flavor) {
		var ret string
		return ret
	}
	return *o.Flavor
}

// GetFlavorOk returns a tuple with the Flavor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePostgresDatabaseRequest) GetFlavorOk() (*string, bool) {
	if o == nil || IsNil(o.Flavor) {
		return nil, false
	}
	return o.Flavor, true
}

// HasFlavor returns a boolean if a field has been set.
func (o *CreatePostgresDatabaseRequest) HasFlavor() bool {
	if o != nil && !IsNil(o.Flavor) {
		return true
	}

	return false
}

// SetFlavor gets a reference to the given string and assigns it to the Flavor field.
func (o *CreatePostgresDatabaseRequest) SetFlavor(v string) {
	o.Flavor = &v
}

// GetHaType returns the HaType field value if set, zero value otherwise.
func (o *CreatePostgresDatabaseRequest) GetHaType() string {
	if o == nil || IsNil(o.HaType) {
		var ret string
		return ret
	}
	return *o.HaType
}

// GetHaTypeOk returns a tuple with the HaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePostgresDatabaseRequest) GetHaTypeOk() (*string, bool) {
	if o == nil || IsNil(o.HaType) {
		return nil, false
	}
	return o.HaType, true
}

// HasHaType returns a boolean if a field has been set.
func (o *CreatePostgresDatabaseRequest) HasHaType() bool {
	if o != nil && !IsNil(o.HaType) {
		return true
	}

	return false
}

// SetHaType gets a reference to the given string and assigns it to the HaType field.
func (o *CreatePostgresDatabaseRequest) SetHaType(v string) {
	o.HaType = &v
}

// GetSize returns the Size field value
func (o *CreatePostgresDatabaseRequest) GetSize() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *CreatePostgresDatabaseRequest) GetSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *CreatePostgresDatabaseRequest) SetSize(v string) {
	o.Size = v
}

// GetStorageSize returns the StorageSize field value if set, zero value otherwise.
func (o *CreatePostgresDatabaseRequest) GetStorageSize() int32 {
	if o == nil || IsNil(o.StorageSize) {
		var ret int32
		return ret
	}
	return *o.StorageSize
}

// GetStorageSizeOk returns a tuple with the StorageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePostgresDatabaseRequest) GetStorageSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.StorageSize) {
		return nil, false
	}
	return o.StorageSize, true
}

// HasStorageSize returns a boolean if a field has been set.
func (o *CreatePostgresDatabaseRequest) HasStorageSize() bool {
	if o != nil && !IsNil(o.StorageSize) {
		return true
	}

	return false
}

// SetStorageSize gets a reference to the given int32 and assigns it to the StorageSize field.
func (o *CreatePostgresDatabaseRequest) SetStorageSize(v int32) {
	o.StorageSize = &v
}

func (o CreatePostgresDatabaseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatePostgresDatabaseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Flavor) {
		toSerialize["flavor"] = o.Flavor
	}
	if !IsNil(o.HaType) {
		toSerialize["ha_type"] = o.HaType
	}
	toSerialize["size"] = o.Size
	if !IsNil(o.StorageSize) {
		toSerialize["storage_size"] = o.StorageSize
	}
	return toSerialize, nil
}

type NullableCreatePostgresDatabaseRequest struct {
	value *CreatePostgresDatabaseRequest
	isSet bool
}

func (v NullableCreatePostgresDatabaseRequest) Get() *CreatePostgresDatabaseRequest {
	return v.value
}

func (v *NullableCreatePostgresDatabaseRequest) Set(val *CreatePostgresDatabaseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePostgresDatabaseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePostgresDatabaseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePostgresDatabaseRequest(val *CreatePostgresDatabaseRequest) *NullableCreatePostgresDatabaseRequest {
	return &NullableCreatePostgresDatabaseRequest{value: val, isSet: true}
}

func (v NullableCreatePostgresDatabaseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePostgresDatabaseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


