/*
Clover API

API for managing resources on Ubicloud

API version: 0.1.0
Contact: support@ubicloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PrivateSubnetApiService PrivateSubnetApi service
type PrivateSubnetApiService service

type ApiCreatePrivateSubnetRequest struct {
	ctx context.Context
	ApiService *PrivateSubnetApiService
	projectId string
	location string
	privateSubnetName string
	createPrivateSubnetRequest *CreatePrivateSubnetRequest
}

func (r ApiCreatePrivateSubnetRequest) CreatePrivateSubnetRequest(createPrivateSubnetRequest CreatePrivateSubnetRequest) ApiCreatePrivateSubnetRequest {
	r.createPrivateSubnetRequest = &createPrivateSubnetRequest
	return r
}

func (r ApiCreatePrivateSubnetRequest) Execute() (*PrivateSubnet, *http.Response, error) {
	return r.ApiService.CreatePrivateSubnetExecute(r)
}

/*
CreatePrivateSubnet Create a new Private Subnet in a specific location of a project

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param location The Ubicloud location/region
 @param privateSubnetName Private subnet name
 @return ApiCreatePrivateSubnetRequest
*/
func (a *PrivateSubnetApiService) CreatePrivateSubnet(ctx context.Context, projectId string, location string, privateSubnetName string) ApiCreatePrivateSubnetRequest {
	return ApiCreatePrivateSubnetRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		location: location,
		privateSubnetName: privateSubnetName,
	}
}

// Execute executes the request
//  @return PrivateSubnet
func (a *PrivateSubnetApiService) CreatePrivateSubnetExecute(r ApiCreatePrivateSubnetRequest) (*PrivateSubnet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrivateSubnet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivateSubnetApiService.CreatePrivateSubnet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/private-subnet/{private_subnet_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"private_subnet_name"+"}", url.PathEscape(parameterValueToString(r.privateSubnetName, "privateSubnetName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createPrivateSubnetRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletePSWithIdRequest struct {
	ctx context.Context
	ApiService *PrivateSubnetApiService
	projectId string
	location string
	privateSubnetId string
}

func (r ApiDeletePSWithIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePSWithIdExecute(r)
}

/*
DeletePSWithId Delete a specific Private Subnet with ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param location The Ubicloud location/region
 @param privateSubnetId Private subnet ID
 @return ApiDeletePSWithIdRequest
*/
func (a *PrivateSubnetApiService) DeletePSWithId(ctx context.Context, projectId string, location string, privateSubnetId string) ApiDeletePSWithIdRequest {
	return ApiDeletePSWithIdRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		location: location,
		privateSubnetId: privateSubnetId,
	}
}

// Execute executes the request
func (a *PrivateSubnetApiService) DeletePSWithIdExecute(r ApiDeletePSWithIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivateSubnetApiService.DeletePSWithId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/private-subnet/id/{private_subnet_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"private_subnet_id"+"}", url.PathEscape(parameterValueToString(r.privateSubnetId, "privateSubnetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeletePrivateSubnetRequest struct {
	ctx context.Context
	ApiService *PrivateSubnetApiService
	projectId string
	location string
	privateSubnetName string
}

func (r ApiDeletePrivateSubnetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePrivateSubnetExecute(r)
}

/*
DeletePrivateSubnet Delete a specific Private Subnet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param location The Ubicloud location/region
 @param privateSubnetName Private subnet name
 @return ApiDeletePrivateSubnetRequest
*/
func (a *PrivateSubnetApiService) DeletePrivateSubnet(ctx context.Context, projectId string, location string, privateSubnetName string) ApiDeletePrivateSubnetRequest {
	return ApiDeletePrivateSubnetRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		location: location,
		privateSubnetName: privateSubnetName,
	}
}

// Execute executes the request
func (a *PrivateSubnetApiService) DeletePrivateSubnetExecute(r ApiDeletePrivateSubnetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivateSubnetApiService.DeletePrivateSubnet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/private-subnet/{private_subnet_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"private_subnet_name"+"}", url.PathEscape(parameterValueToString(r.privateSubnetName, "privateSubnetName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetPSDetailsWithIdRequest struct {
	ctx context.Context
	ApiService *PrivateSubnetApiService
	projectId string
	location string
	privateSubnetId string
}

func (r ApiGetPSDetailsWithIdRequest) Execute() (*PrivateSubnet, *http.Response, error) {
	return r.ApiService.GetPSDetailsWithIdExecute(r)
}

/*
GetPSDetailsWithId Get details of a specific Private Subnet in a location with ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param location The Ubicloud location/region
 @param privateSubnetId Private subnet ID
 @return ApiGetPSDetailsWithIdRequest
*/
func (a *PrivateSubnetApiService) GetPSDetailsWithId(ctx context.Context, projectId string, location string, privateSubnetId string) ApiGetPSDetailsWithIdRequest {
	return ApiGetPSDetailsWithIdRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		location: location,
		privateSubnetId: privateSubnetId,
	}
}

// Execute executes the request
//  @return PrivateSubnet
func (a *PrivateSubnetApiService) GetPSDetailsWithIdExecute(r ApiGetPSDetailsWithIdRequest) (*PrivateSubnet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrivateSubnet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivateSubnetApiService.GetPSDetailsWithId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/private-subnet/id/{private_subnet_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"private_subnet_id"+"}", url.PathEscape(parameterValueToString(r.privateSubnetId, "privateSubnetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPrivateSubnetDetailsRequest struct {
	ctx context.Context
	ApiService *PrivateSubnetApiService
	projectId string
	location string
	privateSubnetName string
}

func (r ApiGetPrivateSubnetDetailsRequest) Execute() (*PrivateSubnet, *http.Response, error) {
	return r.ApiService.GetPrivateSubnetDetailsExecute(r)
}

/*
GetPrivateSubnetDetails Get details of a specific Private Subnet in a location

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param location The Ubicloud location/region
 @param privateSubnetName Private subnet name
 @return ApiGetPrivateSubnetDetailsRequest
*/
func (a *PrivateSubnetApiService) GetPrivateSubnetDetails(ctx context.Context, projectId string, location string, privateSubnetName string) ApiGetPrivateSubnetDetailsRequest {
	return ApiGetPrivateSubnetDetailsRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		location: location,
		privateSubnetName: privateSubnetName,
	}
}

// Execute executes the request
//  @return PrivateSubnet
func (a *PrivateSubnetApiService) GetPrivateSubnetDetailsExecute(r ApiGetPrivateSubnetDetailsRequest) (*PrivateSubnet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrivateSubnet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivateSubnetApiService.GetPrivateSubnetDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/private-subnet/{private_subnet_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"private_subnet_name"+"}", url.PathEscape(parameterValueToString(r.privateSubnetName, "privateSubnetName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListLocationPrivateSubnetsRequest struct {
	ctx context.Context
	ApiService *PrivateSubnetApiService
	projectId string
	location string
	startAfter *string
	pageSize *int32
	orderColumn *string
}

// Pagination - Start after
func (r ApiListLocationPrivateSubnetsRequest) StartAfter(startAfter string) ApiListLocationPrivateSubnetsRequest {
	r.startAfter = &startAfter
	return r
}

// Pagination - Page size
func (r ApiListLocationPrivateSubnetsRequest) PageSize(pageSize int32) ApiListLocationPrivateSubnetsRequest {
	r.pageSize = &pageSize
	return r
}

// Pagination - Order column
func (r ApiListLocationPrivateSubnetsRequest) OrderColumn(orderColumn string) ApiListLocationPrivateSubnetsRequest {
	r.orderColumn = &orderColumn
	return r
}

func (r ApiListLocationPrivateSubnetsRequest) Execute() (*ListLocationPrivateSubnets200Response, *http.Response, error) {
	return r.ApiService.ListLocationPrivateSubnetsExecute(r)
}

/*
ListLocationPrivateSubnets List Private Subnets in a specific location of a project

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @param location The Ubicloud location/region
 @return ApiListLocationPrivateSubnetsRequest
*/
func (a *PrivateSubnetApiService) ListLocationPrivateSubnets(ctx context.Context, projectId string, location string) ApiListLocationPrivateSubnetsRequest {
	return ApiListLocationPrivateSubnetsRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		location: location,
	}
}

// Execute executes the request
//  @return ListLocationPrivateSubnets200Response
func (a *PrivateSubnetApiService) ListLocationPrivateSubnetsExecute(r ApiListLocationPrivateSubnetsRequest) (*ListLocationPrivateSubnets200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListLocationPrivateSubnets200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivateSubnetApiService.ListLocationPrivateSubnets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/location/{location}/private-subnet"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"location"+"}", url.PathEscape(parameterValueToString(r.location, "location")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_after", r.startAfter, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
	}
	if r.orderColumn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_column", r.orderColumn, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPSsRequest struct {
	ctx context.Context
	ApiService *PrivateSubnetApiService
	projectId string
	startAfter *string
	pageSize *int32
	orderColumn *string
}

// Pagination - Start after
func (r ApiListPSsRequest) StartAfter(startAfter string) ApiListPSsRequest {
	r.startAfter = &startAfter
	return r
}

// Pagination - Page size
func (r ApiListPSsRequest) PageSize(pageSize int32) ApiListPSsRequest {
	r.pageSize = &pageSize
	return r
}

// Pagination - Order column
func (r ApiListPSsRequest) OrderColumn(orderColumn string) ApiListPSsRequest {
	r.orderColumn = &orderColumn
	return r
}

func (r ApiListPSsRequest) Execute() (*ListLocationPrivateSubnets200Response, *http.Response, error) {
	return r.ApiService.ListPSsExecute(r)
}

/*
ListPSs List visible Private Subnets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId ID of the project
 @return ApiListPSsRequest
*/
func (a *PrivateSubnetApiService) ListPSs(ctx context.Context, projectId string) ApiListPSsRequest {
	return ApiListPSsRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return ListLocationPrivateSubnets200Response
func (a *PrivateSubnetApiService) ListPSsExecute(r ApiListPSsRequest) (*ListLocationPrivateSubnets200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListLocationPrivateSubnets200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivateSubnetApiService.ListPSs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/private-subnet"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_after", r.startAfter, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
	}
	if r.orderColumn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_column", r.orderColumn, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
